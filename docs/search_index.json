[
["index.html", "MINDMAP data platform tutorial Section 1 Tutorial overview", " MINDMAP data platform tutorial Dany Doiron 2019-03-11 Section 1 Tutorial overview Using harmonized data from two MINDMAP studies, participants will learn: How to access harmonized data on the Opal server via the web RStudio interface How to manipulate harmonized data How to generate study specific and pooled descriptive statistics How to run study specific and pooled regression analyses This tutorial assumes that users have a basic understanding of the R programming language and are familiar with RStudio. Here are a few usefull ressources to familiarize yourself with R: Data camp introductory R course: https://www.datacamp.com/courses/free-introduction-to-r R reference card: https://cran.r-project.org/doc/contrib/Baggott-refcard-v2.pdf Base R package cheat sheet: https://www.rstudio.com/wp-content/uploads/2016/10/r-cheat-sheet-3.pdf Other R package cheat sheets: https://www.rstudio.com/resources/cheatsheets/ "],
["login.html", "Section 2 Project set up 2.1 Log in to RStudio 2.2 Install and load packages 2.3 Log in to Opal", " Section 2 Project set up 2.1 Log in to RStudio First, open up your web browser and go to https://obiba.erasmusmc.nl:8445/. This is the URL for the MINDMAP RStudio instance from which all researchers will analyse data. Enter the username and password provided for this tutorial. Figure 2.1: Login to the web RStudio with username and password provided for the workshop Once logged in to RStudio, open the workshop_scripts.R file located in the Files tab in the bottom right corner of the RStudio environment. As the name suggests, this is an .R file in which scripts for this tutorial are saved. 2.2 Install and load packages Next, we need load R packages we are going to use in this tutorial using the library() command. To do so, execute the following lines in your R session. To execute a script from an R file, place your cursor on the line and Type Ctrl-R. You will notice that the script is then executed in the bottom left Console window. # Load required libraries for this tutorial library(opal) library(tidyverse) library(epiDisplay) library(lme4) library(car) Note: We have pre-installed required R packages in your R environment. For your own analyses, you may need to install additional packages at a later date. This is done by using the install.packages() command and writing the name of the package in quotations (e.g. install.packages(“tidyverse”)). 2.3 Log in to Opal In order to access harmonized data from RStudio, we need to log in to the Opal server, which hosts the harmonized data for the GLOBE and RECORD studies. To do so, execute the following line of script: # Create an object with your Opal login information (password and username) - these are hidden in your .Rprofile file. erasmus_opal &lt;- opal.login() This saves your Opal username and password in a object called erasmus_opal and appears under the Environment tab in the upper right corner of your RStudio interface. Next, assign the data you want to use in your R session. You can either assign an entire table, or a subset of variables from a table using the variables = argument (see example shown in the commented section of the script): # Assign GLOBE data opal.assign.table.tibble(erasmus_opal, &#39;globe_data&#39;, &#39;WORKSHOP.DS_GLOBE&#39;) #opal.assign.table.tibble(erasmus_opal, &#39;globe_data&#39;, &#39;WORKSHOP.DS_GLOBE&#39;,variables = list(&quot;sdc_age_0&quot;,&quot;sdc_gender_0&quot;,&quot;sdc_highest_edu_0&quot;,&quot;sdc_income_0&quot;,&quot;sdc_livstat_0&quot;,&quot;sdc_retire_0&quot;,&quot;phy_bmi_all_0&quot;,&quot;poh_sah_good_0&quot;,&quot;poh_sah_poor_0&quot;,&quot;lsb_smk_status_0&quot;)) # Assign RECORD data opal.assign.table.tibble(erasmus_opal, &#39;record_data&#39;, &#39;WORKSHOP.DS_RECORD&#39;) #opal.assign.table.tibble(erasmus_opal, &#39;record_data&#39;, &#39;WORKSHOP.DS_RECORD&#39;, variables = list(&quot;sdc_age_0&quot;,&quot;sdc_gender_0&quot;,&quot;sdc_highest_edu_0&quot;)) Last, create dataframes in RStudio for your analyses using the following scripts: # Dataframe for GLOBE data globe_data &lt;- opal.execute(erasmus_opal,&#39;globe_data&#39;) # Dataframe for RECORD data record_data &lt;- opal.execute(erasmus_opal,&#39;record_data&#39;) Note: The &lt;- is an assignment operator in R. It creates an object with what is written to its right. You’ll notice that when you run the two lines above, dataframes called globe_data and record_data appear in the upper right hand corner window under the Environment tab, indicating the name of the dataframe, the number of observations and number of variables. "],
["descriptives.html", "Section 3 Descriptive statistics 3.1 Inspect the dataframe 3.2 Measures of central tendancy and variability 3.3 Categorical variables 3.4 Graphs and plots 3.5 Pooled statistics", " Section 3 Descriptive statistics This section will give you a brief overview of how to generate descriptive statistics in R. Note: Throughout this tutorial, use ? in front of a function name to retrieve help files on this function (e.g. ?mean). 3.1 Inspect the dataframe To see variable names of the dataframes we just created, use the colnames() function: # See variable names # GLOBE study colnames(globe_data) # RECORD study colnames(record_data) The head() function gives you the variable names, variable types, and the 6 first lines of values in a dataset. # Inspect GLOBE and RECORD datasets # GLOBE head(globe_data) # RECORD head(record_data) 3.2 Measures of central tendancy and variability Basic R functions for computing descriptive statistics include: mean() - returns the mean of a numeric variable sd() - returns the standard deviation of a numeric variable var() - returns de variance of a numeric variables min() - returns de minimum of a numeric variables maximum() - returns de maximum of a numeric variables median()- returns de median of a numeric variables range() - returns the range of values of a numeric variables (minimum and maximum) IQR() - returns the interquartile range of a numeric variables Let’s try retreiving the mean age for each study. The na.rm = argument in the scripts below removes NULL values before calculating the mean. # Mean age for GLOBE baseline collection wave mean(globe_data$sdc_age_0, na.rm = TRUE) # Mean age for RECORD baseline collection wave mean(record_data$sdc_age_0, na.rm = TRUE) Note: the $ operator refers to a specific column relative to a specific data frame (i.e. collumn sdc_age_0 in dataframe globe_data). The summary() command returns several desciptive statistics summaries for numeric variables. You can either run this command for a single variable or for an entire dataframe. For one variable, this function return the mean, median, 25th and 75th quartiles, minimum and maximum values. When applied to a dataframe, this command generates these statistics for all collumns in this dataframe. # Summary of the GLOBE baseline collection wave age variable summary(globe_data$sdc_age_0) # Summary of the entire GLOBE dataframe summary(globe_data) The summ() function from the epiDisplay package is also quite usefull. In addition to the number of observations, mean, median, standard deviation, minimum, and maximum, it also generates number of missing values and a plot showing the distribution of a given variable. 3.3 Categorical variables For factor variables (i.e. categorical variables), the table() function returns the number of observation per category. # Number of Males/Females in GLOBE table(globe_data$sdc_gender_0) # Number of Males/Females in RECORD table(record_data$sdc_gender_0) Wrapping this function in prop.table() give the proportion of Males and Females in each study. # Proportion of Males (coded as 0) and Females (coded as 1) in GLOBE prop.table(table(globe_data$sdc_gender_0)) # Proporion of Males (coded as 0) and Females (coded as 1) in RECORD prop.table(table(record_data$sdc_gender_0)) Again, the epiDisplay package provides a useful function to summarise categorical data. Running the tab1() function from this package gives you the frequency and proportion for each category and generates a histogram for a variable. Missing data are also shown in tables and histograms. # Proportion of Males/Females in GLOBE tab1(globe_data$sdc_gender_0) # Proporion of Males/Females in RECORD tab1(record_data$sdc_gender_0) 3.4 Graphs and plots R also allows you to generate graphics and plots to visualise harmonized data. For example, you can create a box plot using the boxplot() function or a histogram using the hist() function. # Box plot and histogram of age at baseline for GLOBE Study boxplot(globe_data$sdc_age_0) hist(globe_data$sdc_age_0) # Box plot and histogram of age at baseline for RECORD boxplot(record_data$sdc_age_0) hist(record_data$sdc_age_0) Note: access the help files using ?boxplot and ?hist to learn how to format your box plot or histogram, including how to create a title for your graph, label axes, add colour, subset observations or apply breaks to numerical data. 3.5 Pooled statistics For pooled analyses, we will need a study indicator variable that will adjust for study effect in regression models (Section 5) . The following script creates a new collumn in each dataset called study and gives it a value of ‘GLOBE’ for all observations in globe_data and a value of ‘RECORD’ for all observations in record_data. # Create a new column called study and assign values of 0 (for RECORD) and 1 (for GLOBE) globe_data[&#39;study&#39;]= &quot;GLOBE&quot; record_data[&#39;study&#39;]= &quot;RECORD&quot; Next, we use the rbind() command to combine globe_data and record_data into a single pooled dataset. # Combine dataframes into a pooled dataset using the rbind command pooled_data &lt;- rbind(globe_data, record_data) You can play around with the functions outlined in this section to get descriptive statistics for the pooled dataset. "],
["cross-sectional.html", "Section 4 Cross-sectional analyses 4.1 Linear regression models 4.2 Logistic regression models", " Section 4 Cross-sectional analyses In this section, simple examples of cross-sectional linear and logistic regressions for single studies and for pooled data are presented. 4.1 Linear regression models 4.1.1 Single study The glm() function allows fitting a generalized linear regression model. The example below is a cross-sectional (GLOBE study baseline data) linear regression with body mass index (continuous) as the outcome and age, sex, education level, household income and smoking status as predictor variables. As with all subsequent regression models presented in this tutorial, the outcome is seperated by the ~ operator and each independent variable is seperated by a +. # GLM for BMI using GLOBE study glm_bmi_globe &lt;- glm(phy_bmi_all_0 ~ sdc_age_0 + sdc_gender_0 + sdc_highest_edu_0 + sdc_income_0 + lsb_smk_status_0, family = gaussian, data = globe_data) Note: Using the &lt;- assignment operator allows us to store the results of this analysis in an R object called glm_bmi_globe. Applying the summary() function on this object allows us to see the results of our regression model. # See linear regression results for GLOBE summary(glm_bmi_globe) 4.1.2 Pooled For a pooled analysis, we use the same function, but add the study indicator (i.e. the study variable) in our model to adjust for study effect. Of course the pooled_data dataframe needs to be specified in the data = argument. # GLM for BMI using pooled data glm_bmi_pooled &lt;- glm(phy_bmi_all_0 ~ sdc_age_0 + sdc_gender_0 + sdc_highest_edu_0 + sdc_income_0 + lsb_smk_status_0 + study, family = gaussian, data = pooled_data) Again, we apply the summary() function on this object to see the results of our regression model. # See linear regression results for pooled data summary(glm_bmi_pooled) 4.2 Logistic regression models 4.2.1 Single study The glm() function can also be applied to a categorical outcome by specifying binomial in the family = argument. The example below is a cross-sectional (GLOBE study baseline data) logistic regression with self assessed health (0 = Poor health, 1 = Non poor health) as the outcome and age, sex, education level, household income and smoking status as predictor variables. # GLM for self assessed health using GLOBE study glm_sah_globe &lt;- glm(poh_sah_poor_0 ~ sdc_age_0 + sdc_gender_0 + sdc_highest_edu_0 + sdc_income_0 + lsb_smk_status_0, family = binomial, data = globe_data) # See model results summary(glm_sah_globe) 4.2.2 Pooled As with linear regession, the study variable is added to the pooled logistic regression analyses. # GLM for self assessed health using pooled data glm_sah_pooled &lt;- glm(poh_sah_poor_0 ~ sdc_age_0 + sdc_gender_0 + sdc_highest_edu_0 + sdc_income_0 + lsb_smk_status_0 + study, family = binomial, data = pooled_data) # See model resutls summary(glm_sah_pooled) "],
["longitudinal.html", "Section 5 Longitudinal analyses 5.1 Wide to long format 5.2 Linear mixed models", " Section 5 Longitudinal analyses This section provides simple examples of how to go about conducting longitudinal analyses of harmonized MINDMAP data. 5.1 Wide to long format Before we conduct longitudinal analyses, we need to transform each dataframe (GLOBE and RECORD) from wide to long format. The following scripts does this transformation for each study and saves the new dataframes as globe_data_long and record_data_long. # GLOBE: wide to long format globe_data_long &lt;- globe_data %&gt;% gather(var, value, -entity_id, -study) %&gt;% separate(var, into = c(&quot;variable&quot;, &quot;time&quot;), sep = (&quot;_(?=[^_]+$)&quot;)) %&gt;% spread(variable, value) # RECORD: wide to long format record_data_long &lt;- record_data %&gt;% gather(var, value, -entity_id, -study) %&gt;% separate(var, into = c(&quot;variable&quot;, &quot;time&quot;), sep = (&quot;_(?=[^_]+$)&quot;)) %&gt;% spread(variable, value) Next, we combine GLOBE and RECORD long format dataframes into a pooled dataframe: # Pooled data: long format pooled_data_long &lt;- rbind(globe_data_long, record_data_long) Note: in the long format dataframes the *_0* and *_1* suffixes, indicating baseline and follow up data collections are removed from the datasets. 5.2 Linear mixed models 5.2.1 Continuous outcome (normally distributed) The lmer() function from the lme4 allows us to fit linear mixed-effect models. In the example below, data for two time points (baseline and follow up 1) of the GLOBE study are fitted with body mass index as the outcome and age, sex, household income and smoking status as predictor variables. lmm_bmi_globe &lt;- lmer(phy_bmi_all ~ sdc_age + sdc_gender + sdc_income + lsb_smk_status + (1 | entity_id), data = globe_data_long) summary(lmm_bmi_globe) Below, the same model is fitted to the pooled dataset adding the study indicator variable to the formula. lmm_bmi_pooled &lt;- lmer(phy_bmi_all ~ sdc_age + sdc_gender + sdc_income + lsb_smk_status + study + (1 | entity_id), data = pooled_data_long) summary(lmm_bmi_pooled) 5.2.2 Binary outcome For binary outcomes, the glmer() function is used to fit a generalized linear mixed-effects model. lmm_bmi_pooled &lt;- lmer(phy_bmi_all ~ sdc_age + sdc_gender + sdc_income + lsb_smk_status + study + (1 | entity_id), data = pooled_data_long) summary(lmm_bmi_pooled) "],
["additional-reading.html", "Section 6 Additional reading", " Section 6 Additional reading The UCLA Institute for Digital Research and Education provide usefull ressources on R (https://stats.idre.ucla.edu/r/), including https://stats.idre.ucla.edu/r/dae/mixed-effects-logistic-regression/ R bloggers (https://www.r-bloggers.com) is also a usefull ressource. Finally, typing your problem/model/ with R in a search engine "]
]
